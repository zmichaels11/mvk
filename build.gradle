apply plugin: 'cpp'

wrapper {
    gradleVersion = "4.8"
}

model {
    components {
        marsvk (NativeLibrarySpec) {
            sources {
                cpp {
                    source {
                        srcDir "src/libmarsvk/cpp"
                        include "**/*.cpp", "**/*.c"
                    }

                    exportedHeaders {
                        srcDir "src/libmarsvk/include"
                        include "**/*.hpp", "**/*.h"
                    }
                }
            }

            binaries.all {
                if (toolChain instanceof Gcc || toolChain instanceof Clang) {
                    cppCompiler.args << "-std=c++14"
                    cppCompiler.args << '-g'
                } else if (toolChain instanceof VisualCpp) {
                    cppCompiler.args << "/std:c++14"
                }

                if (targetPlatform.operatingSystem.linux || targetPlatform.operatingSystem.macOS) {
                    linker.args << "-ldl"
                    linker.args << "-lglfw"
                }
            }
        }

        testInit (NativeExecutableSpec) {
            sources {
                cpp {
                    lib library: "marsvk"

                    source {
                        srcDir "src/testInit/cpp"
                        include "**/*.cpp"
                    }
                }
            }

            binaries.all {
                if (toolChain instanceof Gcc || toolChain instanceof Clang) {
                    cppCompiler.args << "-std=c++14"
                } else if (toolChain instanceof VisualCpp) {
                    cppCompiler.args << "/std:c++14"
                }
            }
        }

        testCompute (NativeExecutableSpec) {
            sources {
                cpp {
                    lib library: "marsvk", linkage: 'static'

                    source {
                        srcDir "src/testCompute/cpp"
                        include "**/*.cpp"
                    }
                }
            }

            binaries.all {
                if (toolChain instanceof Gcc || toolChain instanceof Clang) {
                    cppCompiler.args << "-std=c++14"
                } else if (toolChain instanceof VisualCpp) {
                    cppCompiler.args << "/std:c++14"
                }

                if (targetPlatform.operatingSystem.linux || targetPlatform.operatingSystem.macOS) {
                    linker.args << "-ldl"
                    linker.args << "-lglfw"
                }
            }
        }

        testDraw (NativeExecutableSpec) {
            sources {
                cpp {
                    lib library: "marsvk", linkage: 'static'

                    source {
                        srcDir "src/testDraw/cpp"
                        include "**/*.cpp"
                    }
                }
            }

            binaries.all {
                if (toolChain instanceof Gcc || toolChain instanceof Clang) {
                    cppCompiler.args << "-std=c++14"
                    cppCompiler.args << '-g'
                } else if (toolChain instanceof VisualCpp) {
                    cppCompiler.args << "/std:c++14"
                }

                if (targetPlatform.operatingSystem.linux || targetPlatform.operatingSystem.macOS) {
                    linker.args << "-ldl"
                    linker.args << "-lglfw"
                }
            }
        }
    }
}
